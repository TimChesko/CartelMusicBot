import logging
from _operator import itemgetter

from aiogram.enums import ContentType
from aiogram.types import Message
from aiogram_dialog import Dialog, Window, DialogManager, ShowMode
from aiogram_dialog.widgets.input import MessageInput, TextInput
from aiogram_dialog.widgets.kbd import ScrollingGroup, Select, Cancel, Next, SwitchTo
from aiogram_dialog.widgets.text import Const, Format

from src.models.tracks import TrackHandler
from src.utils.fsm import MyTracksApproved


async def tracks_getter(dialog_manager: DialogManager, **_kwargs):
    data = dialog_manager.middleware_data
    approved = await TrackHandler(data['engine'], data['database_logger']).get_approved_by_tg_id(
        data['event_from_user'].id)
    return {
        'approved_tracks': approved
    }


async def title_getter(dialog_manager: DialogManager, **_kwargs):
    data = dialog_manager.middleware_data
    title = await TrackHandler(data['engine'], data['database_logger']).get_title_by_track_id(
        dialog_manager.dialog_data['track_id'])
    return {
        'track_title': title
    }


async def get_text_file(message: Message, _, manager: DialogManager):
    manager.dialog_data["track_text"] = message.document.file_id
    await manager.next()


async def get_alienation_file(message: Message, _, manager: DialogManager):
    # –û—Ç—á—É–∂–¥–µ–Ω–∏–µ
    manager.dialog_data["track_text"] = message.document.file_id
    await manager.switch_to(MyTracksApproved.set_text_author)


async def other_type_handler_docs(message: Message, _, __):
    await message.answer("–ù—É–∂–Ω–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–∞–π–ª —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")


async def other_type_handler_text(message: Message, _, __):
    await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞")


async def on_item_selected(_, __, manager: DialogManager, selected_item: str):
    manager.dialog_data["track_id"] = int(selected_item)
    logging.info(selected_item)
    await manager.next()


async def set_music_title(message: Message, _, manager: DialogManager):
    manager.dialog_data["track_title"] = message.text
    await manager.next()


approved_filling_data = Dialog(
    Window(
        Const("–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫"),
        ScrollingGroup(
            Select(
                Format("üü¢ {item[0]}"),
                id="approved_tracks_item",
                items="approved_tracks",
                item_id_getter=itemgetter(1),
                on_click=on_item_selected
            ),
            width=1,
            height=5,
            id='scroll_tracks_with_pager',
        ),
        Cancel(),
        getter=tracks_getter,
        state=MyTracksApproved.start,
    ),
    Window(
        Const('*–ò–Ω—Ñ–∞ –ø–æ —Ç—Ä–µ–∫—É*'),
        Next(Const('–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ—É')),
        Cancel(Const('–ù–∞–∑–∞–¥')),
        state=MyTracksApproved.track_info
    ),
    Window(
        Const(
            "–í–æ—Ç —Ç–µ–±–µ –µ–±–∞–Ω—É—Ç—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è,"
            " —á—Ç–æ–±—ã –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ–µ –∫ —Ç—Ä–µ–∫—É, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Å—è –µ–± —Ç–≤–æ—é –º–∞—Ç—å"),
        Next(Const('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å')),
        Cancel(Const('–ù–∞–∑–∞–¥')),
        state=MyTracksApproved.filling_data
    ),
    Window(
        Format("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞\n"
               "–ê–∫—Ç—É–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{track_title}'"),
        Next(Const('–û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫')),
        SwitchTo(Const('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'),
                 state=MyTracksApproved.get_text,
                 id='approved_to_get_text'),
        Cancel(),
        state=MyTracksApproved.confirm_title,
        getter=title_getter
    ),
    Window(
        Const("–î–∞–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–º—É —Ç—Ä–µ–∫—É"),
        MessageInput(set_music_title,
                     content_types=[ContentType.TEXT]),
        MessageInput(other_type_handler_text),
        Cancel(),
        state=MyTracksApproved.update_title
    ),
    Window(
        Const("–°–∫–∏–Ω—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt –∏–ª–∏ docs —Å —Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–µ–∫–∞"),
        MessageInput(get_text_file,
                     content_types=[ContentType.DOCUMENT]),
        MessageInput(other_type_handler_docs),
        Cancel(),
        state=MyTracksApproved.get_text
    ),
    Window(
        Const('–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ç–æ —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º –º—É–∑—ã–∫–∏, –µ—Å–ª–∏ –±–∏—Ç –≤—ã–∫—É–ø–ª–µ–Ω - –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –æ—Ç—á—É–∂–¥–µ–Ω–∏–µ'),
        Next(Const('–í—ã–∫—É–ø–ª–µ–Ω')),
        SwitchTo(Const('–ü—Ä–æ—Ü–µ–Ω—Ç'),
                 state=MyTracksApproved.percent_beat,
                 id='beat_percent'),
        SwitchTo(Const('–Ø –∞–≤—Ç–æ—Ä'),
                 state=MyTracksApproved.set_text_author,
                 id='to_text_author'),
        Cancel(),
        state=MyTracksApproved.set_beat_author
    ),
    Window(
        Const('–ü—Ä–∏—à–ª–∏—Ç–µ –æ—Ç—á—É–∂–¥–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF'),
        MessageInput(get_alienation_file,
                     content_types=[ContentType.DOCUMENT]),
        MessageInput(other_type_handler_docs),
        Cancel(),
        state=MyTracksApproved.purchased_beat
    ),
    Window(
        Const('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –±–∏—Ç–º–µ–π–∫–µ—Ä–∞:'),
        TextInput()
    )
)
